#!/bin/bash


#todo interpret more complex commands
#todo support shelves
#todo change chapter titles
#todo config general behavior in lots of ways would be neat
# ----like display one book? toc? toc + some chapters? {ch1, ch2, ... , chn}
		

first_time_setup() {
	mkdir --parents "$book_dir"
	touch "$chapter" "$config_file"
}

read_toc () {
	strbuilts --center "  Table of Contents  "
	cd "$book_dir"
	printf "%s\n" * | column
	strbuilts --line #--center "'noty <chapter>' to see contents"
}

read_helptext () {
	printf "%s\n" \
'
WRITE USAGE: noty <chapter> <note> >OR< noty <note>
READ USAGE: noty >OR< noty <chapter>
	-(-h)elp	prints this text
	-(-t)oc		prints the list of chapters
	-(-c)hapter	create new chapter file in book_directory
	-(-a)ll		prints all saved notes
	-(-s)earch	search notes for a text string
	-(-i)nteractive	enter an interactive mode. "?" to print help
'
}

read_all () {
	for chap in "$book_dir"*; do
		chapter="$chap"
		read_chapter
	done
}
read_chapter () {
	strbuilts --center "  $(basename $chapter) knowledge  "
	printf "%s\n" "$(cat ${chapter})"
}
new_chapter () {
	if [ "${#1}" -lt 3 ]; then echo "3 characters or longer. " && return 1; fi
	title="${1//[!A-Za-z0-9-_./}"
	if [ -n "$title" ]; then chapter="${book_dir}$title"; touch "$chapter"; fi
}
new_sentence () {
	if [ -z "$1" ]; then exit 0; fi
	printf "$*\n" >> "${chapter}"
	if [ "$verbose" = true ]; then tail -n 1 "${chapter}"; fi
}

search_notes () {
	cd "$book_dir"
	grep --color=auto -rn "$1" # r=recursive dir n=line num 
	cd "$OLDPWD"
}
search_notes_regex () {
	cd "$book_dir"
	grep --color=auto -rn "$1" # r=recursive dir n=line num 
	cd "$OLDPWD"
}

################################################################################
#shelf= root directory		book= chapter directory		chapter= notes in files
################################################################################
edit_chapter () {
	cd "$book_dir"; $EDITOR "$(fzf -1 --query ${1:-"$(basename $chapter)"})"
}
delete_chapter () {
	list=()
	for file in "${book_dir}"*; do
		if [ ! -s "$file" ]; then list+=("$file"); fi
	done
	if [ "${#list[@]}" -eq 0 ]; then
		echo "Only empty chapters are valid for deletion; none found."
		return 1
	fi
	printf "noty will delete the following blank chapters:\n"
	printf "%s\n" "$(basename "${list[@]}")"
	read -p "confirm (Y)es to delete the chapters: " key
	if [ "${key,,}" = "y" -o "${key,,}" = "yes" ]; then
		rm "${list[@]}" && echo "succesfully deleted" && return 0
		echo "some issue deleting chapters" && return "$?"
	fi
	echo "No chapters were deleted"
}
input_helptext () { clear
	strbuilts --center '  NOTI commands  '
	printf "%s\n" 'all one letter inputs will try working on [[current working chapter]].
t				prints table of contents, or "index"
h; c				prints this; clears screen
r <chapter>			read chapter.
e <chapter>			opens <chapter> for editing
n; d <chapter>			creates or deletes <chapter>
s <arg>				greps all notes for <arg>
<chapter> & type >1 word, like this, to add notes to that chapter.
'
}

input_interface () {
	IFS=$' ' original_args=($*); set -- "${original_args[@]}" #hack to solve white space annoying thing
	args=(); determine_chapter_flag=false
	for arg in ${original_args[@]}; do
		if [ "${#args[@]}" -le 1 ]; then 
			determine_chapter $arg && { determine_chapter_flag=true ; continue; }
		fi
		args+=("$arg")
	done
	set -- "${args[@]}"
	if [ $# -eq 0 -a $determine_chapter_flag = true ]; then 
		read_chapter; return 0 # hacky flag check sorry friend
	elif [ $# -gt 2 ]; then 
		new_sentence "$@"
	elif [ $# -le 2 ]; then
		case "${1,,}" in  
			t|toc|index|ls) read_toc; ;; 
			r|read)			read_chapter; ;;
			n|new)			new_chapter "$2"; ;;
			s|search|find)	search_notes "$2"; ;;
			e|edit)			edit_chapter "$2"; ;;
			d|delete|del)	delete_chapter "$2"; ;;
			h|help|\?)		input_helptext; ;;
			q|quit|exit|x) 	exit 0; ;; 
			clear|cls|c)	clear; ;;
		esac
	fi
}
input_get () { filtered="cant"; choice="match";
	while [ ! "$filtered" = "$choice" ]; do 
		read -rp "$(interface_prompt)" choice
		filtered="$(input_filter "$choice")"
	done  
	printf "%s" "$filtered"
}
input_filter () {
	allowed='A-Za-z0-9\-\_\.\ \?'
	#lowered="${1,,}" #lowercase
	#we spent too much time fiddling here, caught by the cargo cult obsessive
	#quoting of variables. we need the filter variable unquoted, obviously. duh.
	result="${1//[!$allowed]/}";  
	#debug "filtered: $result"
	printf "%s" "$result"
}
book_dir="$HOME/.config/$USER/noty/"
default_chapter="${book_dir}general"
chapter="$default_chapter"
config_file="${book_dir}.noty_config"
EDITOR="nano"; 		dt=1
verbose=true; debugflag=true
positionals=()
interface_prompt=" >"
debug () { if [ "$debugflag" = "true" ]; then echo "DEBUG: $*"; sleep "${dt:-1}" 
	fi; }
error () { printf "error:$0: %s\n" "$1"; exit "${2:-1}"; }
interface_prompt () { printf "%s" "[[$(basename $chapter)]] :>  "; }
determine_chapter () {
	[ "$1" ] || return 1
	[ "${#1}" -gt 1 ] || return 1
	#detecting a non default chapter specification
	globmatch=("${book_dir}${1}"*)
	if [ -f "${book_dir}${1}" ]; then
		chapter="${book_dir}${1}"
		return 0
	elif [ "${#globmatch[@]}" -eq 1 -a -f "${globmatch[*]}" ]; then
		chapter="${globmatch[*]}"
		return 0
	fi
	return 1
}
print_variables () {
	printf "book_dir: %s\n" "$book_dir"
	printf "default_chapter: %s\n" "$default_chapter"
	printf "chapter: %s\n" "$chapter"
	printf "config_file %s\n" "$config_file"
	printf "EDITOR: %s\n" "$EDITOR" 
}
if [ ! -f "$config_file" ]; then first_time_setup; fi

#if we are being sourced, we dont deal with arguments
(return 0 2>/dev/null) && return 0

while [ -n "$1" ]; do
	case "$1" in
		--all|-a)
			read_all
			exit 0
		;;
		--toc|--table-of-contents|-t)
			read_toc
			exit 0
		;;
		--chapter|-c|--new) 
			shift; new_chapter "$@"; exit "$?"
		;;
		--help|-h)
			read_helptext
			exit 0
		;;
		--edit|-e) shift
			edit_chapter "$@"; exit "$?"
		;;
		--delete|-d)
			shift; delete_chapter; exit 0
		;;
		--variables)
			print_variables; exit 0
		;;
		--search|-s)
			shift
			search_notes "$@"
			exit 0
		;;
		--filter) input_filter "$2"; exit 0; ;;
		--interactive|-i)
			command="None"; clear; shift
			input_interface "${*:-toc}"
			while [ "$command" != "exit" ]; do
				command="$(input_get)"; input_interface "$command"
			done
			exit 0
		;;
	esac
	if [ "$default_chapter" = "$chapter" ]; then 
		determine_chapter "$1" && { shift; continue; }
	fi
	positionals+=("$1")
	shift
done

set -- "${positionals[@]}"
read -a word_counting_array <<< "$*"
words="${#word_counting_array[@]}"

if	 [ "$#" -eq 0 ]; then
	read_chapter; exit 0
elif [ "$#" -eq 1 -a "$chapter" = "$default_chapter" -a "$words" -le 1 ]; then
	read_toc; exit 0
else
	new_sentence "$*"; exit 0
fi
#-------------------------------------------------------------------------------
exit 0
